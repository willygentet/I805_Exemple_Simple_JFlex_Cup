/* package et imports */
package fr.usmb.m1isc.compilation.simple;
import java_cup.runtime.Symbol;

// nom de la classe a generer
class SimpleParser;

/* inclusion du code */

action code {: 
    // pour utilisation dans les actions (classe action)
:};


parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);     
            if (s.left >= 0) {
                /* Ajoute le numero de ligne  */
                m = m + "Ligne " + (s.left+1) + " ";
            }
            if (s.right >= 0) {
                /* Ajoute le numero de colonne  */
                m = m + "Colonne " + (s.right+1) + " ";
            }
            if (s.left >=0  || s.right >= 0) {
                m = m + ": ";            
            }
        }
        m = m + "Erreur de syntaxe";
        System.out.println(m);
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal PLUS, MINUS, DIV, MULT, MOD, LPAR, RPAR, END;
terminal Integer NUMBER;

/* non terminaux */
non terminal seq_expressions, expression;
non terminal Integer expr;

/* Precedences */
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;

/* grammaire */

seq_expressions::= expression seq_expressions | expression ;
expression::= expr:e {: System.out.println
 ("Eval="+e.intValue()); :} END |
 error END ;
expr::=expr:e1 PLUS expr:e2
 {: RESULT=new Integer(e1.intValue()+e2.intValue()); :}
|
 expr:e1 MINUS expr:e2
 {: RESULT=new Integer(e1.intValue()-e2.intValue()); :}
|
 expr:e1 DIV expr:e2
 {: if(e2.intValue() != 0 ) {
        RESULT=new Integer(e1.intValue()/e2.intValue());
    } else {
        System.out.println("divide by 0 error");
        RESULT = 0;
    }
  :}
|
 expr:e1 MULT expr:e2
 {: RESULT=new Integer(e1.intValue()*e2.intValue()); :}
 |
  expr:e1 MOD expr:e2
  {: RESULT=new Integer(e1.intValue()%e2.intValue()); :}
| NUMBER:n {: RESULT=n; :}
| LPAR expr:e RPAR {: RESULT=e; :} ;





